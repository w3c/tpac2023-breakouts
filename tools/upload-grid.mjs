import fs from 'fs';
import { getEnvKey } from './lib/envkeys.mjs';
import { fetchProject, assignSessionsToSlotAndRoom } from './lib/project.mjs'
import { validateSession } from './lib/validate.mjs';
import seedrandom from 'seedrandom';

function readconfig({ filename }) {
   if (filename) {
      let content = fs.readFileSync(filename).toString();
      let regexp = /<pre id="data">[^<]+<\/pre>/s;
      let data = content.match(regexp)[0].match(/\[\{.*\}\]/)[0];
      return(Array.from(JSON.parse(data)));
      }
   }

async function main({ filename, apply }) {
  const PROJECT_OWNER = await getEnvKey('PROJECT_OWNER');
  const PROJECT_NUMBER = await getEnvKey('PROJECT_NUMBER');
  console.warn();
  console.warn(`Retrieve project ${PROJECT_OWNER}/${PROJECT_NUMBER}...`);
  const project = await fetchProject(PROJECT_OWNER, PROJECT_NUMBER);
  if (!project) {
    throw new Error(`Project ${PROJECT_OWNER}/${PROJECT_NUMBER} could not be retrieved`);
  }
  console.warn(`- found ${project.sessions.length} sessions`);
  let sessions = await Promise.all(project.sessions);
  sessions = sessions.filter(s => !!s);
  console.warn(`Retrieve project ${PROJECT_OWNER}/${PROJECT_NUMBER} and session(s)... done`);

  const rooms = project.rooms;
  const slots = project.slots;
  const configs = readconfig({ filename });
    
  for (const config of configs) {
      if (!sessions.map(s => s.number).includes(config.number)) {
     	  console.warn("Unknown session " + config.number);
//	  continue;
      }
      if (!slots.map(s => s.name).includes(config.slot)) {
  	  console.warn("Unknown slot " + config.slot + " in " + config.number);
//   	  continue;	    
      }
      if (!rooms.map(s => s.name).includes(config.room)) {
  	  console.warn("Unknown room " + config.room + " in " + config.number);
//   	  continue;	    	    
      }
      let session = sessions.find(s => s.number === config.number);
      session.room = config.room;
      session.slot = config.slot;
  }
    console.log("Done assigning sessions to rooms and slots.");

//    if (apply) {
//      console.warn();
//      for (const session of sessions) {
//        console.warn(`- updating #${session.number}...`);
/        await assignSessionsToSlotAndRoom(session, project);
//        console.warn(`- updating #${session.number}... done`);
//      }
//    }
	
}


// filename is an HTML file generated by suggest-grid.mjs that
// contains the raw session data
let filename
if (!process.argv[2]) {
    console.warn("Missing first param: HTML file with grid and raw data");
    } else {
    filename  = process.argv[2];
   }

let apply;
if (process.argv[3]) {
    apply = process.argv[3];   
}

main({ filename, apply })
  .catch(err => {
    console.warn(`Something went wrong: ${err.message}`);
    throw err;
  });
